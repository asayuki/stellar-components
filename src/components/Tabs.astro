---
const { buttons, id } = Astro.props;
---

<div class="tabs" data-tabs-id={id}>
  <div class="tab-buttons">
    {buttons.map((button, index) => (
      <button 
        class={(button.active ? 'active' : '') + ` tab-button`} 
        data-id={button.id}
        data-active={button.active ? 'true' : 'false'}
      >
        {button.label}
      </button>
    ))}
  </div>

  <slot />
</div>

<script>
  const switchTab = (id: string, container: HTMLElement) => {
    const tabs = container.querySelectorAll('.tab');
    tabs.forEach((panel: HTMLElement) => panel.style.display = 'none');
    const activePanel: HTMLElement = container.querySelector(`.tab[data-id="${id}"]`);
    if (activePanel) {
      activePanel.style.display = 'block';
    }
  }

  const setupTabs = () => {
    const tabGroups = document.querySelectorAll('[data-tabs-id]');
    tabGroups.forEach((tabsContainer: HTMLElement) => {
      const id = tabsContainer.getAttribute('data-tabs-id');
      const buttons = tabsContainer.querySelectorAll('.tab-buttons button');

      buttons.forEach((button: HTMLElement) => {
        button.addEventListener('click', () => {
          buttons.forEach((btn: HTMLElement) => {
            btn.setAttribute('data-active', 'false')
            btn.classList.remove('active');
          });

          button.setAttribute('data-active', 'true');
          button.classList.add('active');

          switchTab(button.getAttribute('data-id'), tabsContainer);
        });

        if (button.getAttribute('data-active') === 'true') {
          switchTab(button.getAttribute('data-id'), tabsContainer);
        }
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupTabs);
</script>

<style is:global>
    .tab-buttons {
        display: flex;
        gap: 5px;
    }
    .button {
        padding: 10px 20px;
        margin: 5px;
        cursor: pointer;
    }
    .active {
        background-color: #007BFF;
        color: white;
    }

    .tabs .tab {
      animation: fadeIn 0.3s ease-in-out;
      display: none;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
  }
</style>